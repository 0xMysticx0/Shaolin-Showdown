import pygame
from sys import exit
from random import randint, choice
 
class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        player_walk_1 = pygame.image.load('graphics/player/player_walk_1.png').convert_alpha()
        player_walk_2 = pygame.image.load('graphics/player/player_walk_2.png').convert_alpha()
        self.player_walk = [player_walk_1,player_walk_2]
        self.player_index = 0
        self.player_jump = pygame.image.load('graphics/player/jump.png').convert_alpha()
 
        self.image = self.player_walk[self.player_index]
        self.rect = self.image.get_rect(midbottom = (80,300))
        self.gravity = 0
 
        self.jump_sound = pygame.mixer.Sound('audio/jump.mp3')
        self.jump_sound.set_volume(0.5)
 
    def player_input(self):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_RIGHT] and self.rect.right < 800:
            pygame.key.set_repeat(5)
            self.rect.x +=10
           
        if keys[pygame.K_LEFT] and self.rect.left > 0:
            pygame.key.set_repeat(5)
            pygame.transform.flip(self.image, True, False)
            self.rect.x -=10
 
        if keys[pygame.K_UP] and self.rect.bottom ==300:
            pygame.key.set_repeat(5)
            self.jump_sound.play()
            self.gravity =-20
 
    def apply_gravity(self):
        self.gravity += 1
        self.rect.y += self.gravity
        if self.rect.bottom >= 300:
            self.rect.bottom = 300
 
    def animation_state(self):
        if self.rect.bottom < 300:
            self.image = self.player_jump
        else:
            self.player_index += 0.1
            if self.player_index >= len(self.player_walk):self.player_index = 0
            self.image = self.player_walk[int(self.player_index)]
 
    def update(self):
        self.player_input()
        self.apply_gravity()
        self.animation_state()
 
class Obstacle(pygame.sprite.Sprite):
    def __init__(self,type):
        super().__init__()
       
        if type == 'fly':
            fly_1 = pygame.image.load('graphics/fly/fly1.png').convert_alpha()
            fly_2 = pygame.image.load('graphics/fly/fly2.png').convert_alpha()
            self.frames = [fly_1,fly_2]
            y_pos = 210
        else:
            snail_1 = pygame.image.load('graphics/snail/snail1.png').convert_alpha()
            snail_2 = pygame.image.load('graphics/snail/snail2.png').convert_alpha()
            self.frames = [snail_1,snail_2]
            y_pos  = 300
 
        self.animation_index = 0
        self.image = self.frames[self.animation_index]
        self.rect = self.image.get_rect(midbottom = (randint(900,1100),y_pos))
 
    def animation_state(self):
        self.animation_index += 0.1
        if self.animation_index >= len(self.frames): self.animation_index = 0
        self.image = self.frames[int(self.animation_index)]
 
    def update(self):
        self.animation_state()
        self.rect.x -= 6
        self.destroy()
 
    def destroy(self):
        if self.rect.x <= -100:
            self.kill()
 
class Platforms(pygame.sprite.Sprite):
    def __init__(self,type):
        super().__init__()
 
def display_score():
    current_time = int(pygame.time.get_ticks() / 1000) - start_time
    score_surf = test_font.render(f'Score: {current_time}',False,(64,64,64))
    score_rect = score_surf.get_rect(center = (400,50))
    return current_time
 
def collision_sprite():
    if pygame.sprite.spritecollide(player.sprite,obstacle_group,False):
        death_sound.play()
        player.sprite.rect.x = 80
        player.sprite.rect.y = 300
        obstacle_group.empty()
        return False
    else: return True
 
 
pygame.init()
 
#Window Screen
 
screen = pygame.display.set_mode((800,400))
pygame.display.set_caption('Shaolin Showdown')
clock = pygame.time.Clock()
test_font = pygame.font.Font('font/Pixeltype.ttf', 50)
game_active = False
start_time = 0
score = 0
bg_music = pygame.mixer.Sound('audio/music.wav')
bg_music.play(loops = -1)
death_sound = pygame.mixer.Sound('audio/death.mp3')
 
#Set Icon
icon = pygame.image.load('graphics/Window icon.png')
pygame.display.set_icon(icon)
 
#Groups
player = pygame.sprite.GroupSingle()
player.add(Player())
 
obstacle_group = pygame.sprite.Group()
 
sky_surface = pygame.image.load('graphics/Sky.png').convert()
ground_surface = pygame.image.load('graphics/ground.png').convert()
 
# Intro screen
player_stand = pygame.image.load('graphics/player/player_stand.png').convert_alpha()
player_stand = pygame.transform.rotozoom(player_stand,0,2)
player_stand_rect = player_stand.get_rect(center = (400,200))
 
Title_font = pygame.font.Font('font/PixelType.ttf',75)
game_name = Title_font.render('Shaolin Showdown',False,(10,10,10))
game_name_rect = game_name.get_rect(center = (400,60))
 
Start_font = pygame.font.Font('font/PixelType.ttf',45)
start_instruction = Start_font.render('< ;;;;() Press Space Bar to Start >', False,(255,30,0) )
start_instruction_rect = start_instruction.get_rect(center = (400,333))
Title_screen_bg = pygame.image.load('graphics/title_screen_bg.png').convert_alpha()
Game_over_screen = pygame.image.load('graphics/game_over_screen.png').convert_alpha()
 
# Timer
obstacle_timer = pygame.USEREVENT + 1
pygame.time.set_timer(obstacle_timer,900)
 
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            exit()
 
        if game_active:
            if event.type == obstacle_timer:
                obstacle_group.add(Obstacle(choice(['fly','snail'])))
       
        else:
            if event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
                game_active = True
                start_time = int(pygame.time.get_ticks() / 1000)
 
 
    if game_active:
        screen.blit(sky_surface,(0,0))
        screen.blit(ground_surface,(0,290))
        score = display_score()
       
        player.draw(screen)
        player.update()
 
        obstacle_group.draw(screen)
        obstacle_group.update()
 
        game_active = collision_sprite()
       
    else:
        screen.blit(Title_screen_bg, (0,0))
        screen.blit(player_stand,player_stand_rect)
 
        score_message = test_font.render(f'Your Score: {score}',False,(255,36,0))
        score_message_rect = score_message.get_rect(center = (400,310))
        screen.blit(game_name,game_name_rect)
 
        if score == 0: screen.blit(start_instruction,start_instruction_rect)
        else:
            game_over_font = pygame.font.Font('font/PixelType.ttf',100)
            game_over = game_over_font.render('Game Over',False,(255,36,0))
            game_over_rect = game_over.get_rect(center = (400, 80))
            try_again_font = pygame.font.Font('font/PixelType.ttf',25)
            try_again = try_again_font.render('Press Space Bar to Reclaim your Honor',False,(255,36,0))
            try_again_rect = try_again.get_rect(center = (400, 369))
            screen.blit(Game_over_screen,(0,0))
            screen.blit(score_message,score_message_rect)
            screen.blit(game_over,game_over_rect)
            screen.blit(try_again,try_again_rect)
 
    pygame.display.update()
    clock.tick(60)
